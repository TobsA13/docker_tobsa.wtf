version: "3.9"

networks:
  backend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1

volumes:
  mariadb:
  mongodb:
  npm_data:
  npm_letsencrypt:
  ts3data:
  changedetection-data:
  healthchecks-data:
  hedgedoc-data:
  privatebin-data:
  pihole-data:
  pihole-dnsmasq:
  unifi-data:
  gotify-data:
  traefik-certs-data:
  heimdall-data:

services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    ports:
      # Public HTTP Port:
      - '80:80'
      # Public HTTPS Port:
      - '443:443'
    environment:
      - HETZNER_API_KEY=${HETZNER_API_KEY}
      - TZ=Europe/Berlin
    networks:
      - backend
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./traefik/config.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik/dynamic:/etc/traefik/dynamic:ro"
      - "traefik-certs-data:/etc/traefik/certs"
  
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - WATCHTOWER_SCHEDULE=0 0 6 * * *
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/etc/localtime:/etc/localtime:ro"

  db:
    container_name: db
    image: 'mariadb:10'
    environment:
      - TZ=Europe/Berlin
    networks:
      - backend
    volumes:
      - "mariadb:/var/lib/mysql"
      - "/etc/localtime:/etc/localtime:ro"

  mongodb:
    container_name: mongodb
    image: mongo:6
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
    networks:
      - backend
    volumes:
      - mongodb:/data/db

  phpmyadmin:
    container_name: phpmyadmin
    image: 'phpmyadmin:5'
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - PMA_HOST=db
      - PMA_VERBOSE=tobsa.wtf
#      - PMA_ABSOLUTE_URI=pma.tobsa.dev
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pma.rule=Host(`pma.tobsa.dev`)"
      - "traefik.http.routers.pma.entrypoints=websecure"
      - "traefik.http.routers.pma.middlewares=vpn-whitelist@file"
      - "traefik.http.routers.pma.tls=true"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"

  npm:
    container_name: npm
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      # These are the settings to access your db
      - DB_MYSQL_HOST=db
      - DB_MYSQL_PORT=3306
      - DB_MYSQL_USER=npm
      - DB_MYSQL_PASSWORD=npm
      - DB_MYSQL_NAME=npm
      # If you would rather use Sqlite uncomment this
      # and remove all DB_MYSQL_* lines above
      # DB_SQLITE_FILE: "/data/database.sqlite"
      # Uncomment this if IPv6 is not enabled on your host
      #DISABLE_IPV6: 'true'
    networks:
      - backend
    volumes:
      - "npm_data:/data"
      - "npm_letsencrypt:/etc/letsencrypt"
      - "/etc/localtime:/etc/localtime:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.npm.loadbalancer.server.port=81"
      - "traefik.http.routers.npm.rule=Host(`npm.tobsa.dev`)"
      - "traefik.http.routers.npm.entrypoints=websecure"
      - "traefik.http.routers.npm.middlewares=vpn-whitelist@file"
      - "traefik.http.routers.npm.tls=true"
    depends_on:
      - db

  web-public:
    container_name: web-public
    build:
      context: webserver-public/.
    restart: unless-stopped
    networks:
      - backend
    environment:
      - TZ=Europe/Berlin
    volumes:
      - "/opt/www-public:/var/www/html/"
      - "/etc/localtime:/etc/localtime:ro"
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "traefik.enable=true"
      - "traefik.http.routers.web-public.rule=Host(`tobsa.wtf`) || Host(`www.tobsa.wtf`) || Host(`tobias-albert.net`) || Host(`www.tobias-albert.net`)"
      - "traefik.http.routers.web-public.entrypoints=websecure"
      - "traefik.http.routers.web-public.tls=true"
    depends_on:
      - db

  web-vpn:
    container_name: web-vpn
    build:
      context: webserver-vpn/.
    restart: unless-stopped
    networks:
      - backend
    environment:
      - TZ=Europe/Berlin
    volumes:
      - "/opt/www-vpn:/var/www/html/"
      - "/etc/localtime:/etc/localtime:ro"
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "traefik.enable=true"
      - "traefik.http.routers.web-vpn.rule=Host(`web.tobsa.dev`)"
      - "traefik.http.routers.web-vpn.entrypoints=websecure"
      - "traefik.http.routers.web-vpn.middlewares=vpn-whitelist@file"
      - "traefik.http.routers.web-vpn.tls=true"
    depends_on:
      - db

  teamspeak:
    container_name: teamspeak
    image: teamspeak
    restart: unless-stopped
    ports:
      - 39987-39988:39987-39988/udp
      - 10022:10022
      - 30033:30033
    environment:
      - TZ=Europe/Berlin
      - TS3SERVER_LICENSE=accept
      - TS3SERVER_QUERY_PROTOCOLS=ssh
    networks:
      - backend
    volumes:
      - "ts3data:/var/ts3server"
      - "/etc/localtime:/etc/localtime:ro"
    depends_on:
      - db

  ts-manager:
    container_name: ts-manager
    image: "joni1802/ts3-manager"
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - WHITELIST=teamspeak
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ts3.rule=Host(`ts3.tobsa.dev`)"
      - "traefik.http.routers.ts3.entrypoints=websecure"
      - "traefik.http.routers.ts3.middlewares=vpn-whitelist@file"
      - "traefik.http.routers.ts3.tls=true"
    depends_on:
      - teamspeak
      
  changedetection:
    container_name: changedetection
    image: ghcr.io/dgtlmoon/changedetection.io
    restart: unless-stopped
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - changedetection-data:/datastore
    environment:
      - TZ=Europe/Berlin
      - USE_X_SETTINGS=1
      - BASE_URL=https://cd.tobsa.dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cd.rule=Host(`cd.tobsa.dev`)"
      - "traefik.http.routers.cd.entrypoints=websecure"
      - "traefik.http.routers.cd.middlewares=vpn-whitelist@file"
      - "traefik.http.routers.cd.tls=true"
    networks:
      - backend

  healthchecks:
    container_name: healthchecks
    image: lscr.io/linuxserver/healthchecks
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - SITE_ROOT=https://hc.tobsa.dev
      - SITE_NAME=TobsA.WTF Healthcheck
      - ALLOWED_HOSTS=["hc.tobsa.dev","hc.tobsa.wtf"]
      - SUPERUSER_EMAIL=hc@tobsa.wtf
      - REGISTRATION_OPEN=False
      - DEBUG=False
      - REGENERATE_SETTINGS=True
    volumes:
      - healthchecks-data:/config
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hc.rule=Host(`hc.tobsa.dev`) || Host(`hc.tobsa.wtf`)"
      - "traefik.http.routers.hc.entrypoints=websecure"
      - "traefik.http.routers.hc.tls=true"
    networks:
      - backend

  hedgedoc:
    container_name: hedgedoc
    # Make sure to use the latest release from https://hedgedoc.org/latest-release
    image: quay.io/hedgedoc/hedgedoc:1.9.3
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - CMD_DB_URL=mysql://hedgedoc:hedgedoc@db:3306/hedgedoc
      - CMD_DOMAIN=pad.tobsa.wtf
      - CMD_PROTOCOL_USESSL=true
      - CMD_URL_ADDPORT=false
      - CMD_ALLOW_ANONYMOUS=false
      - CMD_ALLOW_ANONYMOUS_EDITS=true
      - CMD_DEFAULT_PERMISSION=private
      - CMD_EMAIL=false
      - CMD_ALLOW_EMAIL_REGISTER=False
      - CMD_OAUTH2_AUTHORIZATION_URL=https://cloud.tobsa.wtf/apps/oauth2/authorize
      - CMD_OAUTH2_TOKEN_URL=https://cloud.tobsa.wtf/apps/oauth2/api/v1/token
      - CMD_OAUTH2_USER_PROFILE_URL=https://cloud.tobsa.wtf/ocs/v2.php/cloud/user?format=json
      - CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=ocs.data.id
      - CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=ocs.data.display-name
      - CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=ocs.data.email
      #Secrets in hedgedoc.env
    env_file:
      - hedgedoc.env
    volumes:
      - hedgedoc-data:/hedgedoc/public/uploads
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pad.rule=Host(`pad.tobsa.dev`) || Host(`pad.tobsa.wtf`)"
      - "traefik.http.routers.pad.entrypoints=websecure"
      - "traefik.http.routers.pad.tls=true"
    depends_on:
      - db

  privatebin:
    container_name: privatebin
    image: privatebin/nginx-fpm-alpine:stable
    read_only: true
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
    volumes:
      - privatebin-data:/srv/data
      - ./privatebin_conf:/srv/cfg/conf.php:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.privatebin.rule=Host(`paste.tobsa.dev`) || Host(`paste.tobsa.wtf`)"
      - "traefik.http.routers.privatebin.entrypoints=websecure"
      - "traefik.http.routers.privatebin.tls=true"
    networks:
      - backend

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: unless-stopped
    ports:
      - "10.14.0.7:53:53/tcp"
      - "10.14.0.7:53:53/udp"
    environment:
      - TZ=Europe/Berlin
    volumes:
      - 'pihole-data:/etc/pihole'
      - 'pihole-dnsmasq:/etc/dnsmasq.d'
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
      - "traefik.http.routers.pihole.rule=Host(`pihole.tobsa.dev`)"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.middlewares=vpn-whitelist@file"
      - "traefik.http.routers.pihole.tls=true"
      - "traefik.http.middlewares.pihole-redirectregex.redirectregex.regex=/admin/$$"
      - "traefik.http.middlewares.pihole-redirectregex.redirectregex.replacement=/"
      - "traefik.http.middlewares.pihole-addprefix.addprefix.prefix=/admin"
    networks:
      - backend

  unifi:
    container_name: unifi
    image: jacobalberty/unifi:latest
    environment:
      - TZ=Europe/Berlin
    volumes:
      - unifi-data:/unifi
    ports:
      - 8443:8443
      - 3478:3478/udp
      - 8080:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.unifi.loadbalancer.server.port=8443"
      - "traefik.http.services.unifi.loadbalancer.server.scheme=https"
      - "traefik.http.routers.unifi.rule=Host(`unifi.tobsa.dev`)"
      - "traefik.http.routers.unifi.entrypoints=websecure"
      - "traefik.http.routers.unifi.middlewares=vpn-whitelist@file"
      - "traefik.http.routers.unifi.tls=true"
    restart: unless-stopped
    networks:
      - backend

  gotify:
    container_name: gotify
    image: gotify/server
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
    volumes:
      - gotify-data:/app/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gotify.rule=Host(`push.tobsa.dev`) || Host(`push.tobsa.wtf`)"
      - "traefik.http.routers.gotify.entrypoints=websecure"
      - "traefik.http.routers.gotify.tls=true"
    networks:
      - backend

  spotify-worker:
    container_name: spotify-worker
    image: yooooomi/your_spotify_server
    restart: unless-stopped
    depends_on:
      - mongodb
    environment:
      - TZ=Europe/Berlin
      - API_ENDPOINT=https://spotify-backend.tobsa.wtf
      - CLIENT_ENDPOINT=https://spotify.tobsa.wtf
      - MONGO_ENDPOINT=mongodb://mongodb:27017/your_spotify
      - SPOTIFY_PUBLIC=${SPOTIFY_PUBLIC}
      - SPOTIFY_SECRET=${SPOTIFY_SECRET}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.spotify_worker.loadbalancer.server.port=8080"
      - "traefik.http.routers.spotify_worker.rule=Host(`spotify-backend.tobsa.wtf`)"
      - "traefik.http.routers.spotify_worker.entrypoints=websecure"
      - "traefik.http.routers.spotify_worker.tls=true"
    networks:
      - backend

  spotify-frontend:
    container_name: spotify-frontend
    image: yooooomi/your_spotify_client
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - API_ENDPOINT=https://spotify-backend.tobsa.wtf
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.spotify_frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.spotify_frontend.rule=Host(`spotify.tobsa.wtf`)"
      - "traefik.http.routers.spotify_frontend.entrypoints=websecure"
      - "traefik.http.routers.spotify_frontend.tls=true"
    networks:
      - backend

  heimdall:
    container_name: heimdall
    image: lscr.io/linuxserver/heimdall:latest
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    volumes:
      - heimdall-data:/config
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.heimdall.loadbalancer.server.port=443"
      - "traefik.http.services.heimdall.loadbalancer.server.scheme=https"
      - "traefik.http.routers.heimdall.rule=Host(`tobsa.dev`)"
      - "traefik.http.routers.heimdall.middlewares=vpn-whitelist@file"
      - "traefik.http.routers.heimdall.entrypoints=websecure"
      - "traefik.http.routers.heimdall.tls=true"
    networks:
      - backend